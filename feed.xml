<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code, Love &amp; Boards</title>
  <subtitle>A blog about coding web apps, loving life and board sports</subtitle>
  <id>http://codeloveandboards.com/blog</id>
  <link href="http://codeloveandboards.com/blog"/>
  <link href="http://codeloveandboards.com/feed.xml" rel="self"/>
  <updated>2020-07-03T05:19:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Headless CMS fun with Phoenix LiveView and Airtable (pt. 1)</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2020/07/02/headless-cms-fun-with-phoenix-liveview-and-airtable-pt-1/"/>
    <id>http://codeloveandboards.com/blog/2020/07/02/headless-cms-fun-with-phoenix-liveview-and-airtable-pt-1/</id>
    <published>2020-07-03T05:19:00Z</published>
    <updated>2020-07-04T10:39:52+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="index"&gt;
  &lt;p&gt;This post belongs to the &lt;strong&gt;Headless CMS fun with Phoenix LiveView and Airtable&lt;/strong&gt; series.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href="/blog/2020/07/02/headless-cms-fun-with-phoenix-liveview-and-airtable-pt-1"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;Coming soon...&lt;/li&gt;
  &lt;/ol&gt;

  &lt;a href="https://github.com/bigardone/passwordless-auth" target="_blank"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Last year, I built a static website for a friend of mine who has an Italian restaurant, which has been vital for her business since then. The first year the site performed really well businesswise. However, issues have started to appear as my friend needed to change the site&amp;#39;s content to showcase the new season products, menu, and schedule. I started implementing the changes by hand, but we suddenly realized that this was not convenient at all, since she needed to change the content on the fly without having to rely on me. After considering many different possibilities, I solved the problem by implementing a simple solution in a single weekend, thanks to &lt;a href="https://www.phoenixframework.org/"&gt;Phoenix&lt;/a&gt; and &lt;a href="https://airtable.com/"&gt;Airtable&lt;/a&gt;. Here&amp;#39;s who I did it.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this new tutorial, we are going to be building a headless content management system consisting of two main elements, which are an Airtable base and a Phoenix application powered by LiveView. Let&amp;#39;s take a more in-depth look at them:&lt;/p&gt;

&lt;h3&gt;Airtable&lt;/h3&gt;

&lt;p&gt;Airtable is a really cool service based on spreadsheets grouped in bases, that act as a database. Using a very intuitive and friendly UI, it lets you design your own data structures, add attachments, handle relationships between different tables, design different data views for your tables, and much more. It also exposes all the data through a very convenient API, which is crucial for this tutorial.&lt;/p&gt;

&lt;p&gt;But why do we need such a service? The main reason is that we want to externalize the content of our website and the management of it by our users, letting us focus only on building the presentation layer, which is a simple Phoenix application. And Airtable is perfect for that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://airtable.com/shribMafJ0mAR7nic/tblLCFjonKFPr4yiN/viwgxDq0PyWSRs8N4?blocks=hide"&gt;Here you can find the base&lt;/a&gt; that we are using for this tutorial, which consists of two tables:&lt;/p&gt;

&lt;h4&gt;The contents table&lt;/h4&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/phoenix-cms-1/airtable-1.png"/&gt;&lt;/p&gt;

&lt;p&gt;This table stores the sections of the main page. Its structure is straightforward, structuring the data with the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: the ID of the section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt;: An auto-increment number that specifies the order of the section within the page.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt;: the type of the section, which can have three different values:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hero&lt;/code&gt;: for a hero section containing a big title and subtitle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text_and_image&lt;/code&gt;: for sections that have some text and an image.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature&lt;/code&gt;: for a section that has a list of items with some text and an icon.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: the title of the section.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;: the main content of the section. It can store HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;: the main image of the section. Stored as an attachment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;styles&lt;/code&gt;: any additional styles that we want to add to the section.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;The articles table&lt;/h4&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/phoenix-cms-1/airtable-2.png"/&gt;&lt;/p&gt;

&lt;p&gt;This table stores all the blog articles of our website, and each article consists of the following attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slug&lt;/code&gt;: the SEO friendly slug for the article.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;title&lt;/code&gt;: the main title of the article.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;description&lt;/code&gt;: the article&amp;#39;s excerpt.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;image&lt;/code&gt;: the main image of the article. Stored as an attachment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;: the main content of the article. It can store HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;author&lt;/code&gt;: the email of the article&amp;#39;s author.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;published_at&lt;/code&gt;: the publication date of the article.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Phoenix application&lt;/h3&gt;

&lt;p&gt;The presentation layer of our CMS is a Phoenix application which supervision tree looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/phoenix-cms-1/app-diagram.png"/&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s have a closer look at some of its components.&lt;/p&gt;

&lt;h4&gt;Cache&lt;/h4&gt;

&lt;p&gt;Airtable has a limit of five requests per second for free accounts, so we can&amp;#39;t just send requests on every page visit, because if we have a lot of users, the API is likely going to start returning rate limit errors. Using Erlang&amp;#39;s &lt;a href="https://erlang.org/doc/man/ets.html"&gt;ETS&lt;/a&gt; to store successful responses from the API helps to prevent rate limiting issues. Once a page is mounted, the data is taken from the cache instead of performing an HTTP request. However, this is not enough, because we need to keep the cache data synced with the latest changes in Airtable.&lt;/p&gt;

&lt;h4&gt;Synchronizer&lt;/h4&gt;

&lt;p&gt;To keep the cache data in sync with Airtable, it spawns a &lt;a href="https://hexdocs.pm/elixir/GenServer.html"&gt;GenServer&lt;/a&gt; process, which periodically makes requests to the API every second, updating its stored data if needed and broadcasting the new data to the live views using &lt;a href="https://hexdocs.pm/phoenix_pubsub/Phoenix.PubSub.html"&gt;PubSub&lt;/a&gt;. This way, we limit the number of interactions with the API to two requests per second, no matter the number of users are currently visiting our site.&lt;/p&gt;

&lt;h4&gt;LiveView&lt;/h4&gt;

&lt;p&gt;Instead of using regular views and templates, the application takes advantage of Phoenix &lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html"&gt;LiveView&lt;/a&gt;, subscribing to specific PubSub topics, updating its data when needed, and refreshing its content on the browser without requiring a reload from the user.&lt;/p&gt;

&lt;p&gt;Here you can see the three views that it has:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/phoenix-cms-1/site.jpg"/&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A main landing page that renders the sections stored in the contents table. These sections are the main hero section, some image and text sections, and a feature list section.&lt;/li&gt;
&lt;li&gt;A blog page, listing all the articles stored in the articles table.&lt;/li&gt;
&lt;li&gt;An article detail page that renders a complete article.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And I think this is all for the introduction. In the next part, we will start building the Phoenix application and implementing an HTTP client to retrieve the data stored in Airtable. In the meantime, you can check the end result &lt;a href="https://phoenixcms.herokuapp.com/"&gt;here&lt;/a&gt;, or have a look at the &lt;a href="https://github.com/bigardone/phoenix-cms"&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class="btn-wrapper"&gt;
  &lt;a href="https://phoenixcms.herokuapp.com/" target="_blank" class="btn"&gt;&lt;i class="fa fa-cloud"&gt;&lt;/i&gt; Live demo&lt;/a&gt;
  &lt;a href="https://github.com/bigardone/phoenix-cms" target="_blank" class="btn"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>elmcsspatterns.io</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2020/04/27/elmcsspatterns-io/"/>
    <id>http://codeloveandboards.com/blog/2020/04/27/elmcsspatterns-io/</id>
    <published>2020-04-27T07:00:00Z</published>
    <updated>2020-04-28T09:02:33+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;h2&gt;The inspiration&lt;/h2&gt;

&lt;p&gt;A couple of weeks ago, while searching for a convenient CSS pattern that I needed to implement in one of my elm projects, I stumbled upon &lt;a href="https://csslayout.io/"&gt;csslayout.io&lt;/a&gt; and felt in love with it instantly. His author, &lt;a href="https://dev.to/phuocng"&gt;phuocng&lt;/a&gt;, has done a fantastic job not only collecting such a massive collection of patterns but making them easy to find and implement.&lt;/p&gt;

&lt;h2&gt;The motivation&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://csslayout.io/"&gt;csslayout.io&lt;/a&gt; is the kind of resource that I like to keep handy while working on my front-end, as I tend to write my styles without using any CSS framework whatsoever. Moreover, for the last year, I only use &lt;a href="https://github.com/rtfeldman/elm-css"&gt;elm-css&lt;/a&gt; to generate the CSS, which feels to me like &lt;a href="https://sass-lang.com/"&gt;Sass&lt;/a&gt; but functional and statically typed, which is just awesome. Unfortunately, there aren&amp;#39;t any similar resources for &lt;a href="https://github.com/rtfeldman/elm-css"&gt;elm-css&lt;/a&gt; that I&amp;#39;m aware of, so I couldn&amp;#39;t resist writing my version, collecting and sharing the common patterns that I often use.&lt;/p&gt;

&lt;p&gt;On the other hand, I&amp;#39;ve been looking for an excuse to play around with &lt;a href="https://github.com/ryannhg/elm-spa"&gt;elm-spa&lt;/a&gt; lately, which I think is going to be one of the next big things in the elm ecosystem. If you are not familiar with &lt;a href="https://github.com/ryannhg/elm-spa"&gt;elm-spa&lt;/a&gt;, it basically consists of an elm library and a JS client, which automagically takes care of generating all the boilerplate regarding elm single-page applications, letting you focus on the fun part. His author, &lt;a href="https://github.com/ryannhg"&gt;ryannhg&lt;/a&gt;, is doing an excellent job, keep it up!&lt;/p&gt;

&lt;h2&gt;The result&lt;/h2&gt;

&lt;p&gt;So having &lt;a href="https://csslayout.io/"&gt;csslayout.io&lt;/a&gt; as inspiration, and &lt;a href="https://github.com/rtfeldman/elm-css"&gt;elm-css&lt;/a&gt; + &lt;a href="https://github.com/ryannhg/elm-spa"&gt;elm-spa&lt;/a&gt; as motivation, I have started working on &lt;a href="https://elmcsspatterns.io/"&gt;elmcsspatterns.io&lt;/a&gt;. It is still an early version, and I will probably change everything now and then, but if you are into &lt;strong&gt;elm&lt;/strong&gt; and &lt;strong&gt;elm-css&lt;/strong&gt; I hope you find it useful, and if not, I hope it makes you want to try them :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://elmcsspatterns.io/" target="_blank" class="btn"&gt;
&lt;img class="center" src="/images/blog/elmcsspatterns/home.png"/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class="btn-wrapper"&gt;
  &lt;a href="https://elmcsspatterns.io/" target="_blank" class="btn"&gt;&lt;i class="fa fa-cloud"&gt;&lt;/i&gt; Site&lt;/a&gt;
  &lt;a href="https://github.com/bigardone/elm-css-patterns" target="_blank" class="btn"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Dynamic base path for an Elm SPA</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2019/06/06/dynamic-base-path-for-an-elm-spa/"/>
    <id>http://codeloveandboards.com/blog/2019/06/06/dynamic-base-path-for-an-elm-spa/</id>
    <published>2019-06-06T07:00:00Z</published>
    <updated>2019-06-15T11:31:45+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;While building an Elm SPA dashboard, I faced the following problem. In the local development environment, the URL to access it is &lt;code&gt;http://localhost:1234&lt;/code&gt;, which is Parcel&amp;#39;s default URL, and the Elm SPA gets mounted in &lt;code&gt;/&lt;/code&gt;, so Elm navigation handles as expected any internal routes like &lt;code&gt;/projects&lt;/code&gt; or &lt;code&gt;/tasks&lt;/code&gt;. The problem came while deploying it into production because the base URL didn&amp;#39;t match the root path. In other words, it looked something like &lt;a href="https://nifty-minsky-538aab.netlify.com/private/admin/"&gt;https://nifty-minsky-538aab.netlify.com/private/admin/&lt;/a&gt; where &lt;code&gt;/private/admin/&lt;/code&gt; was the base path for the application, and this path could change depending on the environment, which made Elm navigation tricky, especially while parsing URLs to get the current route. I wanted to avoid using URL fragments, so this is how I solved it.&lt;/p&gt;

&lt;h3&gt;The &amp;lt;base&amp;gt; HTML element&lt;/h3&gt;

&lt;p&gt;First of all, I needed a way to prepend the dynamic base URL to any of the internal Elm routes. After some research I found the handy &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base"&gt;&amp;lt;base&amp;gt;&lt;/a&gt; HTML element, which specifies the base URL to use for all relative URLs contained within a document. This means that if you set &lt;code&gt;&amp;lt;base href=&amp;quot;http://localhost:1234/private/admin/&amp;quot;&amp;gt;&lt;/code&gt;, any relative link I would add like &lt;code&gt;&amp;lt;a href=&amp;quot;projects&amp;quot;&amp;gt;Projects&amp;lt;/a&amp;gt;&lt;/code&gt;, automatically points to &lt;code&gt;http://localhost:1234/private/admin/projects&lt;/code&gt;, and that was exactly what I was looking for.&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;base href=&amp;quot;{{ BASE_URL }}&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;main&amp;gt;&amp;lt;/main&amp;gt;
    &amp;lt;script src=&amp;quot;./js/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting the &lt;code&gt;href&lt;/code&gt; value for the current environment is easy using environment variables, depending on the technology stack you are using.&lt;/p&gt;

&lt;h3&gt;Passing the base path to the Elm application&lt;/h3&gt;

&lt;p&gt;Now that I had a way to set the base URL to all the internal links of the application, I needed a way to make Elm aware of this base path, which was pretty straightforward using flags and the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI"&gt;baseURI&lt;/a&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;import { Elm } from &amp;#39;../src/Main.elm&amp;#39;;

const basePath = new URL(document.baseURI).pathname;

Elm.Main.init({
  node: document.querySelector(&amp;#39;main&amp;#39;),
  flags: { basePath },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;baseURI&lt;/code&gt; basically returns the document&amp;#39;s location, unless you set &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; in which case it always returns the value set. I only needed the path, therefore taking it from &lt;code&gt;URL(document.baseURI).pathname&lt;/code&gt; and passing it to the &lt;code&gt;Elm.Main.init&lt;/code&gt; function as a flag.&lt;/p&gt;

&lt;h3&gt;Elm routing and the base path&lt;/h3&gt;

&lt;p&gt;I always like defining the application routes as soon as possible, which helps me understand how to structure it. Moreover, in this particular case, routing was the source of the issue and the solution ifself, so let&amp;#39;s have a look at the &lt;code&gt;Route&lt;/code&gt; module I implemented:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- src/Route.elm

module Route exposing
    ( Route(..)
    , fromUrl
    , toString
    )

import Url exposing (Url)
import Url.Parser as Parser exposing (Parser)


type Route
    = Home
    | Projects
    | Tasks
    | NotFound


parser : Parser (Route -&amp;gt; b) b
parser =
    Parser.oneOf
        [ Parser.map Home Parser.top
        , Parser.map Projects (Parser.s &amp;quot;projects&amp;quot;)
        , Parser.map Tasks (Parser.s &amp;quot;tasks&amp;quot;)
        ]

-- ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty much the standard way of defining routes and their parser in Elm, and there wasn&amp;#39;t any particular change I had to implement to make it work. However, both &lt;code&gt;fromUrl&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; functions needed to be slightly different than usual:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- src/Route.elm

-- ...


fromUrl : String -&amp;gt; Url -&amp;gt; Route
fromUrl basePath url =
    { url | path = String.replace basePath &amp;quot;&amp;quot; url.path }
        |&amp;gt; Parser.parse parser
        |&amp;gt; Maybe.withDefault NotFound


toString : Route -&amp;gt; String
toString route =
    case route of
        Home -&amp;gt;
            &amp;quot;&amp;quot;

        Projects -&amp;gt;
            &amp;quot;projects&amp;quot;

        Tasks -&amp;gt;
            &amp;quot;tasks&amp;quot;

        NotFound -&amp;gt;
            &amp;quot;not-found&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;fromUrl&lt;/code&gt; takes a &lt;code&gt;basePath&lt;/code&gt; and a &lt;code&gt;Url&lt;/code&gt; parameter and returns a &lt;code&gt;Route&lt;/code&gt;. The first parameter is the flag passed to the Elm application on its initialization, and to get the corresponding &lt;code&gt;Route&lt;/code&gt;, we only need to remove &lt;code&gt;basePath&lt;/code&gt; from its path and parse it as usually. Bear in mind, that this only works with URLs built using the &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element set in the document header. Last but not least, the &lt;code&gt;toString&lt;/code&gt; function offers a convenient way of building a relative path for a given &lt;code&gt;Route&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Gluing it all together&lt;/h3&gt;

&lt;p&gt;Having the parsing of URLs solved, building the rest of the application was quite simple. Let&amp;#39;s take a look at some of the implementation details:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- src/Main.elm

module Main exposing (main)


import Browser exposing (Document)
import Browser.Navigation as Navigation
import Html as Html exposing (Html)
import Route exposing (Route)
import Url exposing (Url)

-- MODEL


type alias Flags =
    { basePath : String }


type alias Model =
    { flags : Flags
    , navigation : Navigation
    }


type alias Navigation =
    { key : Navigation.Key
    , route : Route
    }


init : Flags -&amp;gt; Url -&amp;gt; Navigation.Key -&amp;gt; ( Model, Cmd Msg )
init ({ basePath } as flags) url key =
    ( { flags = flags
      , navigation =
            { key = key
            , route = Route.fromUrl basePath url
            }
      }
    , Cmd.none
    )

-- ...

-- MAIN


main : Program Flags Model Msg
main =
    Browser.application
        { init = init
        , update = update
        , view = view
        , subscriptions = subscriptions
        , onUrlRequest = UrlRequested
        , onUrlChange = UrlChange
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I usually store the flags passed to the application in the model using a custom type named &lt;code&gt;Flags&lt;/code&gt;, which in this particular example only contains &lt;code&gt;basePath&lt;/code&gt;. I also like to store a &lt;code&gt;Navigation&lt;/code&gt; custom element which contains a &lt;code&gt;Navigation.Key&lt;/code&gt;, necessary for navigating, and the current route. The &lt;code&gt;init&lt;/code&gt; function is using the previously defined &lt;code&gt;Route.fromUrl&lt;/code&gt; function to set the current route from the browser&amp;#39;s URL and the &lt;code&gt;basePath&lt;/code&gt; flag. However, it also needs to set it every time the URL changes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- src/Main.elm

-- ...

-- UPDATE


type Msg
    = UrlRequested Browser.UrlRequest
    | UrlChange Url


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg ({ flags, navigation } as model) =
    case msg of
        UrlRequested urlRequest -&amp;gt;
-- ...

        UrlChange url -&amp;gt;
            ( { model
                | navigation =
                    { navigation
                        | route = Route.fromUrl flags.basePath url
                    }
              }
            , Cmd.none
            )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is how I created the navigation links using the &lt;code&gt;Route.toString&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;Html.div
    []
    [ Html.a
        [ Html.href &amp;lt;| Route.toString Route.Home ]
        [ Html.text &amp;quot;Home&amp;quot; ]
    , Html.a
        [ Html.href &amp;lt;| Route.toString Route.Projects ]
        [ Html.text &amp;quot;Projects&amp;quot; ]
    , Html.a
        [ Html.href &amp;lt;| Route.toString Route.Tasks ]
        [ Html.text &amp;quot;Tasks&amp;quot; ]
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;#39;s it; everything worked like a charm. Being honest, I tried different approaches before getting to this solution, including custom &lt;code&gt;Url&lt;/code&gt; parsers, which is something difficult to understand for me. Have you faced the same issue? If so, I hope this solution helps you on the next occasion, and if you have solved differently, please share it :)&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class="btn-wrapper"&gt;
  &lt;a href="https://nifty-minsky-538aab.netlify.com/private/admin/" target="_blank" class="btn"&gt;&lt;i class="fa fa-cloud"&gt;&lt;/i&gt; Live demo&lt;/a&gt;
  &lt;a href="https://github.com/bigardone/elm-dynamic-base-path" target="_blank" class="btn"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Concurrent ant farm with Elixir and Phoenix LiveView</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2019/03/28/concurrent-ant-farm-with-elixir-and-phoenix-liveview/"/>
    <id>http://codeloveandboards.com/blog/2019/03/28/concurrent-ant-farm-with-elixir-and-phoenix-liveview/</id>
    <published>2019-03-28T07:00:00Z</published>
    <updated>2019-05-11T09:04:33+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;A couple of years ago, I worked on an &lt;strong&gt;Elixir&lt;/strong&gt; personal project which consisted of a virtual ant farm, where every ant was a GenServer process, simulating a basic AI behavior. What initially was going to be something straightforward; it ended up being much bigger and not working as planned, and eventually forgotten. When Chris Maccord announced &lt;a href="https://github.com/phoenixframework/phoenix_live_view"&gt;Phoenix LiveView&lt;/a&gt;, I thought to myself that I wouldn&amp;#39;t use it for now, because I enjoy too much writing front-end in &lt;strong&gt;Elm&lt;/strong&gt;. However, I also love &lt;strong&gt;Elixir&lt;/strong&gt; and &lt;strong&gt;Phoenix&lt;/strong&gt;, so I couldn&amp;#39;t resist giving it a try, and giving the ant farm another go, this time using &lt;strong&gt;Elixir&lt;/strong&gt; only, and trying to invest the less time possible. So I rolled up my sleeves, and surprisingly, four or five hours later I had the ant farm working, and this is how I did it:&lt;/p&gt;

&lt;h3&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;Before continuing, take this small experiment with a grain of salt. I don&amp;#39;t know anything about AI behaviors, nor SVG animations, so there is plenty of room for improvement. However, this is what worked fine after the first try, and I didn&amp;#39;t want to expend more than an evening on it. This being said, let&amp;#39;s get cracking!&lt;/p&gt;

&lt;h3&gt;Setting up the project with LiveView&lt;/h3&gt;

&lt;p&gt;Creating the project and adding &lt;strong&gt;LiveView&lt;/strong&gt; was pretty straight forward. There are already several tutorials over the Internet about how to add &lt;strong&gt;LiveView&lt;/strong&gt; to a &lt;strong&gt;Phoenix&lt;/strong&gt; application, so I jumped into &lt;a href="https://elixirschool.com/blog/phoenix-live-view/"&gt;this great post&lt;/a&gt; from &lt;a href="https://elixirschool.com/blog"&gt;Elixir School Blog&lt;/a&gt;and followed the instructions, which are very clear and easy to implement. Some minutes later, I had the project up and running.&lt;/p&gt;

&lt;h3&gt;Bringing ants to life&lt;/h3&gt;

&lt;p&gt;After having all the necessary project boilerplate, I started by defining what an ant is, and creating a simple module to define the data structure to represent its state:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant/state.ex

defmodule AntFarm.Ant.State do
  alias __MODULE__

  @type position :: {integer, integer}
  @type velocity :: {integer, integer}
  @type state :: :walking | :resting | :panicking

  @type t :: %State{
          id: String.t(),
          position: position,
          velocity: velocity,
          focus: non_neg_integer,
          state: state,
          speed: float
        }

  defstruct [:id, :position, :velocity, :focus, :state, :speed]

  def new(id) do
    state = random_state()

    %State{
      id: id,
      position: random_position(),
      velocity: random_velocity(),
      focus: random_focus(state),
      state: state,
      speed: @speed
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It has the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; to identify uniquely every ant.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;position&lt;/code&gt; which represents its current &lt;code&gt;{X, Y}&lt;/code&gt; coordinates.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;velocity&lt;/code&gt; which represents its movement direction, being &lt;code&gt;{1 | 0 | -1, 1 | 0 | -1}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus&lt;/code&gt; which determines when it gets bored with its current behavior.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;state&lt;/code&gt; which represents its current behavior, and can be one of &lt;code&gt;:walking&lt;/code&gt;, &lt;code&gt;:resting&lt;/code&gt; or &lt;code&gt;:panicking&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed&lt;/code&gt; which represents its current speed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also added a &lt;code&gt;new/1&lt;/code&gt; helper function which returns a state struct with random values.&lt;/p&gt;

&lt;p&gt;Having this state defined, I moved on to creating the ant process definition:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant.ex

defmodule AntFarm.Ant do
  use GenServer

  alias __MODULE__.{State, Behaviour}
  @timeout 60

  @doc false
  def start_link(opts) do
    id = Keyword.fetch!(opts, :id)

    GenServer.start_link(__MODULE__, id, name: name(id))
  end

  def get_state(pid), do: GenServer.call(pid, :get_state)

  @impl true
  def init(id) do
    schedule()
    {:ok, State.new(id)}
  end

  @impl true
  def handle_call(:get_state, _from, state) do
    {:reply, state, state}
  end

  @impl true
  def handle_info(:perform_actions, state) do
    state = Behaviour.process(state)
    schedule()

    {:noreply, state}
  end

  defp name(id), do: String.to_atom(&amp;quot;ant::&amp;quot; &amp;lt;&amp;gt; id)

  defp schedule do
    Process.send_after(self(), :perform_actions, @timeout)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a basic &lt;code&gt;GenServer&lt;/code&gt; implementation that starts a new named process, which state is a &lt;code&gt;AntFarm.Ant.State&lt;/code&gt; struct. To emulate some random behavior, every 60 milliseconds it processes its state with the &lt;code&gt;AntFarm.Ant.Behaviour.process/1&lt;/code&gt; function, which returns the new state to set.&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant/behaviour.ex

defmodule AntFarm.Ant.Behaviour do
  alias AntFarm.Ant.State

  @max_width Application.get_env(:ant_farm, :colony)[:width]
  @max_height Application.get_env(:ant_farm, :colony)[:height]

  def process(%State{state: :resting, focus: 0} = state) do
    State.start_walking(state)
  end

  def process(%State{state: :resting} = state) do
    State.keep_resting(state)
  end

  def process(%State{state: :walking, focus: 0} = state) do
    State.start_resting(state)
  end

  def process(%State{state: :walking, speed: speed, position: {x, y}} = state) do
    {vx, vy} = velocity = calculate_velocity(state)
    position = {x + vx * speed, y + vy * speed}

    state
    |&amp;gt; State.keep_walking()
    |&amp;gt; State.set_velocity(velocity)
    |&amp;gt; State.set_position(position)
  end

  # ...
  # ...
  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;process/1&lt;/code&gt; function receives an ant state, and returns a new one depending on its current properties and applying some of the following logic:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the current &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;:resting&lt;/code&gt; and &lt;code&gt;focus&lt;/code&gt; is 0, it forces the ant to start walking.&lt;/li&gt;
&lt;li&gt;On the other hand, if &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;:resting&lt;/code&gt; but it is still focusing on resting, then the ant keeps resting (which subtracts 1 to the current &lt;code&gt;focus&lt;/code&gt; value).&lt;/li&gt;
&lt;li&gt;If the current &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;:walking&lt;/code&gt; and &lt;code&gt;focus&lt;/code&gt; is 0, the ant gets tired and starts resting.&lt;/li&gt;
&lt;li&gt;But if &lt;code&gt;state&lt;/code&gt; is &lt;code&gt;:walking&lt;/code&gt; and it is still focusing on it, then it keeps walking calculating its new velocity (in case it hits the ant farm boundaries) and position.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just an example of how to implement some basic logic to emulate behavior depending on a current state. To see all the details check out the &lt;a href="https://github.com/bigardone/phoenix-liveview-ant-farm/blob/master/lib/ant_farm/ant/behaviour.ex"&gt;AntFarm.Ant.Behaviour&lt;/a&gt; source code.&lt;/p&gt;

&lt;p&gt;At this point I had defined an ant&amp;#39;s structure and behavior, so the next thing I needed was a way to spawn new ants on demand, and &lt;strong&gt;Elixir&lt;/strong&gt;&amp;#39;s &lt;a href="https://hexdocs.pm/elixir/DynamicSupervisor.html"&gt;DynamicSupervisor&lt;/a&gt; was the right tool for it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant/supervisor.ex

defmodule AntFarm.Ant.Supervisor do
  use DynamicSupervisor

  alias AntFarm.Ant

  def start_link(arg) do
    DynamicSupervisor.start_link(__MODULE__, arg, name: __MODULE__)
  end

  def start_child do
    spec = {Ant, id: generate_id()}
    DynamicSupervisor.start_child(__MODULE__, spec)
  end

  def populate(count \\ 1) do
    for _ &amp;lt;- 1..count, do: start_child()
  end

  def ants do
    __MODULE__
    |&amp;gt; DynamicSupervisor.which_children()
    |&amp;gt; Task.async_stream(&amp;amp;get_ant_state/1)
    |&amp;gt; Enum.map(fn {:ok, state} -&amp;gt; state end)
  end

  @impl true
  def init(_arg) do
    DynamicSupervisor.init(strategy: :one_for_one)
  end

  # ...
  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;start_child&lt;/code&gt; function makes the supervisor spawn a new &lt;code&gt;Ant&lt;/code&gt; process with a random &lt;code&gt;id&lt;/code&gt;. I also added an &lt;code&gt;ants&lt;/code&gt; function which returns all its children state. Last but not least, the &lt;code&gt;populate/1&lt;/code&gt; function spawns a given number of ant processes, which is going to become handy to spawn some ants once the application starts. For this purpose, I also created a small populator module:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant/supervisor/populator.ex

defmodule AntFarm.Ant.Supervisor.Populator do
  alias AntFarm.Ant.Supervisor, as: AntSupervisor

  @population Application.get_env(:ant_farm, :colony)[:population]

  def child_spec(opts) do
    %{
      id: __MODULE__,
      start: {__MODULE__, :start_link, [opts]},
      type: :worker,
      restart: :permanent,
      shutdown: 500
    }
  end

  def start_link(_opts \\ []) do
    AntSupervisor.populate(@population)
    :ignore
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To spawn the ants once the application starts, and moreover, once the &lt;code&gt;AntFarm.Ant.Supervisor&lt;/code&gt; has started, we only need to add it to the main supervision tree like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/application.ex

defmodule AntFarm.Application do
  use Application

  def start(_type, _args) do
    children = [
      AntFarm.Ant.Supervisor,
      AntFarm.Ant.Supervisor.Populator,
      AntFarmWeb.Endpoint
    ]

    opts = [strategy: :one_for_one, name: AntFarm.Supervisor]
    Supervisor.start_link(children, opts)
  end

  def config_change(changed, _new, removed) do
    AntFarmWeb.Endpoint.config_change(changed, removed)
    :ok
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how the application looked like the first time I started it, spawning only ten ant processes:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/liveview-ant-farm/tree.jpg"/&gt;&lt;/p&gt;

&lt;h3&gt;Rendering the ant farm&lt;/h3&gt;

&lt;p&gt;Now that I had a bunch of ants doing their ant things, it was time for some &lt;strong&gt;LiveView&lt;/strong&gt; fun, and displaying them in the browser. The first step was to render the basic template from the main controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm_web/templates/page/index.html.eex

&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;header class=&amp;quot;main-header&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;Phoenix LiveView Ant Farm&amp;lt;/h1&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;%= live_render(@conn, AntFarmWeb.AntFarmLiveView, session: nil) %&amp;gt;
  &amp;lt;p&amp;gt;
    Crafted with ♥ by &amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;https://github.com/bigardone&amp;quot;&amp;gt;bigardone&amp;lt;/a&amp;gt; |
    Check out the &amp;lt;a target=&amp;quot;_blank&amp;quot; href=&amp;quot;https://github.com/bigardone/phoenix-liveview-ant-farm&amp;quot;&amp;gt;source code&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here comes the tricky part. Calling &lt;code&gt;live_render/3&lt;/code&gt; renders the &lt;strong&gt;LiveView&lt;/strong&gt;, which is the content that is going to be changing periodically to animate the ants. Let&amp;#39;s take a look at the &lt;code&gt;AntFarmWeb.AntFarmLiveView&lt;/code&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm_web/live/ant_farm_live_view.ex

defmodule AntFarmWeb.AntFarmLiveView do
  use Phoenix.LiveView

  alias AntFarm.Ant.Supervisor, as: Colony

  @timeout 60

  @impl true
  def mount(_session, socket) do
    if connected?(socket), do: schedule()
    ants = Colony.ants()
    {:ok, assign(socket, ants: ants)}
  end

  @impl true
  def render(assigns) do
    AntFarmWeb.PageView.render(&amp;quot;ant_farm.html&amp;quot;, assigns)
  end

  def handle_info(:tick, socket) do
    schedule()
    ants = Colony.ants()
    {:noreply, assign(socket, ants: ants)}
  end

  defp schedule do
    Process.send_after(self(), :tick, @timeout)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When rendering the template for the first time, the &lt;code&gt;mount/2&lt;/code&gt; function gets called, assigning the existing ants to the connection, rendering the first static HTML and making the JS client connect to the socket. Only then, it creates the stateful view, invoking &lt;code&gt;mount/2&lt;/code&gt; again with the signed session, and calling the private &lt;code&gt;schedule/0&lt;/code&gt; function, which sends the tick message to the &lt;strong&gt;LiveView&lt;/strong&gt; process every sixty milliseconds, retrieving the new ant states and assigning it to the socket forcing a new render of the &lt;code&gt;ant_farm.html&lt;/code&gt; template.&lt;/p&gt;

&lt;p&gt;The only thing left was creating the &lt;code&gt;ant_farm.html&lt;/code&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm_web/templates/page/ant_farm.html.leex

&amp;lt;div class=&amp;quot;main-content&amp;quot;&amp;gt;
  &amp;lt;h2&amp;gt;Rendering &amp;lt;%= length(@ants) %&amp;gt; concurrent ants&amp;lt;/h2&amp;gt;
  &amp;lt;svg viewbox=&amp;quot;0 0 1024 600&amp;quot;&amp;gt;
    &amp;lt;rect width=&amp;quot;1024&amp;quot; height=&amp;quot;600&amp;quot; fill=&amp;quot;#00b349&amp;quot;/&amp;gt;
    &amp;lt;%= for %{position: {x, y}} &amp;lt;- @ants do %&amp;gt;
      &amp;lt;rect width=&amp;quot;2&amp;quot; height=&amp;quot;2&amp;quot; fill=&amp;quot;#000000&amp;quot; x=&amp;quot;&amp;lt;%= x %&amp;gt;&amp;quot; y=&amp;quot;&amp;lt;%= y %&amp;gt;&amp;quot;/&amp;gt;
    &amp;lt;% end %&amp;gt;
  &amp;lt;/svg&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is what I saw when I went to the browser:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" src="/images/blog/liveview-ant-farm/ants.gif"/&gt;&lt;/p&gt;

&lt;p&gt;My ants were finally alive, yay!&lt;/p&gt;

&lt;h3&gt;Do not tap on glass&lt;/h3&gt;

&lt;p&gt;After having all the ants walking around the screen, I wanted to add some interactivity with them, and the most reasonable to me was clicking on the farm box. &lt;strong&gt;LiveView&lt;/strong&gt; comes with some event handling support out of the box, so I went back to the documentation and implemented the &lt;code&gt;phx-click&lt;/code&gt; binding in the &lt;code&gt;ant_farm.html&lt;/code&gt; template:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm_web/templates/page/ant_farm.html.leex

# ...
# ...

  &amp;lt;svg class=&amp;quot;panic&amp;lt;%= @panic %&amp;gt;&amp;quot; phx-click=&amp;quot;tap&amp;quot; viewbox=&amp;quot;0 0 1024 600&amp;quot;&amp;gt;
    # ...
    # ...
  &amp;lt;/svg&amp;gt;

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding the &lt;code&gt;phx-click=&amp;quot;tap&amp;quot;&lt;/code&gt; attribute, makes the &lt;strong&gt;LiveView&lt;/strong&gt; JS client send a &lt;code&gt;tap&lt;/code&gt; message through the socket every time a user clicks on the &lt;code&gt;svg&lt;/code&gt; element. Therefore, the &lt;code&gt;AntFarmWeb.AntFarmLiveView&lt;/code&gt; needs to handle it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm_web/live/ant_farm_live_view.ex

defmodule AntFarmWeb.AntFarmLiveView do
  use Phoenix.LiveView

  # ...

  @impl true
  def mount(_session, socket) do
    if connected?(socket), do: schedule()
    ants = Colony.ants()
    {:ok, assign(socket, panic: false, ants: ants)}
  end

  # ...

  @impl true
  def handle_event(&amp;quot;tap&amp;quot;, _value, socket) do
    Colony.panic()
    Process.send_after(self(), :chill, 1000)
    {:noreply, assign(socket, panic: true)}
  end

  def handle_info(:chill, socket) do
    {:noreply, assign(socket, panic: false)}
  end

  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The tap event handler calls &lt;code&gt;Colony.panick/0&lt;/code&gt; which makes all ants go crazy, sets its assign &lt;code&gt;panic&lt;/code&gt; value to &lt;code&gt;true&lt;/code&gt; and after a second sends a &lt;code&gt;:chill&lt;/code&gt; message, which sets the &lt;code&gt;panic&lt;/code&gt; assign value back to &lt;code&gt;false&lt;/code&gt;. This is a trick I did, to toggle a particular class to the SVG DOM element, which adds a vibration animation. Let&amp;#39;s take a look at the &lt;code&gt;Colony.panic/0&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant/supervisor.ex

defmodule AntFarm.Ant.Supervisor do
  use DynamicSupervisor

  # ...

  def panic do
    __MODULE__
    |&amp;gt; DynamicSupervisor.which_children()
    |&amp;gt; Enum.each(&amp;amp;do_panic/1)
  end

  defp do_panic({_, pid, _, _}), do: Ant.panic(pid)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It takes all of its children PIDs and calls &lt;code&gt;Ant.panic/1&lt;/code&gt; with each of them:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# lib/ant_farm/ant.ex

defmodule AntFarm.Ant do
  use GenServer

  # ...

  def panic(pid), do: GenServer.cast(pid, :panic)

  # ...

  @impl true
  def handle_cast(:panic, %State{state: :panicking} = state) do
    {:noreply, state}
  end

  def handle_cast(:panic, state) do
    {:noreply, State.start_panicking(state)}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;panic/1&lt;/code&gt; function sends a &lt;code&gt;:panic&lt;/code&gt; message to the given PID, which takes the current &lt;code&gt;state&lt;/code&gt; and makes the ant go crazy for a random number of ticks, only if it&amp;#39;s not already panicking though. The result is quite nice as you can see in &lt;a href="https://phoenix-liveview-ant-farm.herokuapp.com"&gt;the demo&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;And, this is pretty much it. In a single evening, I managed to code the project and deploy it into Heroku. I was amazed about how easy was adding &lt;strong&gt;LiveView&lt;/strong&gt; to the project, how well it worked and the overall result. I&amp;#39;m definitely keeping an eye on &lt;strong&gt;LiveView&lt;/strong&gt; updates and how it evolves to use it in future projects. Don&amp;#39;t forget to check out the demo and the final repository in the links below.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class="btn-wrapper"&gt;
  &lt;a href="https://phoenix-liveview-ant-farm.herokuapp.com/" target="_blank" class="btn"&gt;&lt;i class="fa fa-cloud"&gt;&lt;/i&gt; Live demo&lt;/a&gt;
  &lt;a href="https://github.com/bigardone/phoenix-liveview-ant-farm" target="_blank" class="btn"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Elm and Web Components</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2018/09/09/elm-and-web-components/"/>
    <id>http://codeloveandboards.com/blog/2018/09/09/elm-and-web-components/</id>
    <published>2018-09-09T08:35:00Z</published>
    <updated>2018-09-09T18:13:14+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One of my favorite talks from &lt;a href="https://2018.elmeurope.org/"&gt;Elm Europe 2018&lt;/a&gt; conference was the one about &lt;a href="https://www.youtube.com/watch?v=tyFe9Pw6TVE"&gt;When and how to use Web Components with Elm&lt;/a&gt; by &lt;a href="https://github.com/lukewestby"&gt;Luke Westby&lt;/a&gt;, creator of the popular &lt;strong&gt;Elm&lt;/strong&gt; live editor &lt;a href="https://ellie-app.com/new"&gt;Ellie&lt;/a&gt;. In this fun and enlightening talk, he suggests an alternative way of using external JS libraries in &lt;strong&gt;Elm&lt;/strong&gt;, rather than relying on ports. Ports, although being the standard way of communicating with external JS in &lt;strong&gt;Elm&lt;/strong&gt;, might not be the right tool for some particular situations, especially when your application grows and you need to handle a significant amount of them. The alternative way he exposes is using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;Web Components&lt;/a&gt;, which is &lt;em&gt;a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps&lt;/em&gt;. This solution blew up my mind, so I couldn&amp;#39;t resist trying it out myself, and I had the perfect project for it :)&lt;/p&gt;

&lt;h3&gt;Revisiting Phoenix &amp;amp; Elm landing page&lt;/h3&gt;

&lt;p&gt;Some months ago I did a small tutorial about &lt;a href="/blog/2017/12/02/phoenix-elm-landing-page-pt-1"&gt;creating a landing page with Phoenix and Elm&lt;/a&gt;, in which we added &lt;a href="https://developers.google.com/recaptcha/"&gt;Google reCAPTCHA&lt;/a&gt; to add security to the subscription form. Both the initialization and passing the response token are handled using ports, which makes it the perfect candidate for being a custom Web Component. Let&amp;#39;s add the definition of the custom element:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// assets/js/components/recaptcha.

export default class Recaptcha extends HTMLElement {
  constructor() {
    const self = super();

    self._grecaptcha = null;
    self._token = null;

    return self;
  }

  connectedCallback() {
    this._grecaptcha = grecaptcha.render(this, {
      hl: &amp;#39;en&amp;#39;,
      sitekey: &amp;#39;your-recaptcha-site-key&amp;#39;,
      callback: (token) =&amp;gt; {
        this._token = token;
        this.dispatchEvent(new CustomEvent(&amp;#39;gotToken&amp;#39;));
      },
    });
  }

  set token(token) {
    this._token = token;

    if (this._grecaptcha !== null &amp;amp;&amp;amp; token === null) grecaptcha.reset(this._grecaptcha);
  }

  get token() {
    return this._token;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are defining the &lt;code&gt;Recaptcha&lt;/code&gt; class which extends &lt;code&gt;HTMLElement&lt;/code&gt; and has the following functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constructor&lt;/code&gt;, in which we define the internal properties of the component. In our case, we have &lt;code&gt;_grecaptcha&lt;/code&gt; to store the &lt;strong&gt;reCAPTCHA&lt;/strong&gt; plugin instance, and &lt;code&gt;_token&lt;/code&gt; to store the token received from Google while validating the user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connetedCallback&lt;/code&gt; is one of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#Using_the_lifecycle_callbacks"&gt;lifecycle callbacks&lt;/a&gt; of any custom element, and in which we initialize the internal &lt;strong&gt;reCAPTCHA&lt;/strong&gt; plugin, and dispatches a custom &lt;code&gt;gotToken&lt;/code&gt; event with the value received from Google.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set token()&lt;/code&gt; and &lt;code&gt;get token()&lt;/code&gt; which are the getter and setter functions for the &lt;code&gt;token&lt;/code&gt; property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we have defined the &lt;code&gt;Recaptcha&lt;/code&gt; custom element, let&amp;#39;s edit the main &lt;code&gt;app.js&lt;/code&gt; file to remove use it and also remove the unnecessary port&amp;#39;s functionality that we don&amp;#39;t need anymore:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// assets/js/app.

import Elm from &amp;#39;./elm/main&amp;#39;;
import Recaptcha from &amp;#39;./components/recaptcha&amp;#39;;

window.customElements.define(&amp;#39;g-recaptcha&amp;#39;, Recaptcha);

window.onloadCallback = () =&amp;gt; {
  const formContainer = document.querySelector(&amp;#39;#form_container&amp;#39;);

  if (formContainer) {
    Elm.Main.embed(formContainer);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We register the custom element using &lt;code&gt;window.customElements.define&lt;/code&gt; which takes the &lt;code&gt;name&lt;/code&gt; (requires a dash on it) of the HTML node and the component definition, in our case &lt;code&gt;Recaptcha&lt;/code&gt;. From now on, we can add  our new &lt;code&gt;Recaptcha&lt;/code&gt; custom element by adding a &lt;code&gt;&amp;lt;g-recaptacha&amp;gt;&amp;lt;/g-recaptcha&amp;gt;&lt;/code&gt; tag, so let&amp;#39;s edit them Elm view module to remove the old div we were using to render the &lt;code&gt;reCAPTCHA&lt;/code&gt; component, and add the new tag:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- assets/elm/src/View.elm

module View exposing (view)

-- ...

formView : SubscribeForm -&amp;gt; Html Msg
formView subscribeForm =
        let
            { fullName, email, recaptchaToken } =
                    extractFormFields subscribeForm
        -- ...
        in
        -- ...
            , Html.div
                [ Html.class &amp;quot;field&amp;quot; ]
                [ Html.node &amp;quot;g-recaptcha&amp;quot;
                    [ Html.id &amp;quot;recaptcha&amp;quot;
                    , Html.property &amp;quot;token&amp;quot; &amp;lt;| encodeRecaptchaToken recaptchaToken
                    , Html.on &amp;quot;gotToken&amp;quot; decodeGotToken
                    ]
                    []
                , validationErrorView &amp;quot;recaptcha_token&amp;quot; validationErrors
                ]
                        , -- ...



encodeRecaptchaToken : Maybe String -&amp;gt; Encode.Value
encodeRecaptchaToken maybeRecaptchaToken =
    case maybeRecaptchaToken of
        Just recaptchaToken -&amp;gt;
            Encode.string recaptchaToken

        Nothing -&amp;gt;
            Encode.null


decodeGotToken : Decode.Decoder Msg
decodeGotToken =
    Decode.map SetRecaptchaToken &amp;lt;| Decode.at [ &amp;quot;target&amp;quot;, &amp;quot;token&amp;quot; ] &amp;lt;| Decode.string

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make the custom element work we need to do the following:
- Define the new &lt;code&gt;g-recaptcha&lt;/code&gt; node using &lt;code&gt;Html.node&lt;/code&gt;.
- Set the &lt;code&gt;token&lt;/code&gt; property with &lt;code&gt;Html.property&lt;/code&gt; which in the component uses internally the &lt;code&gt;set token(token)&lt;/code&gt; setter function we have defined previously.
- Handle the custom &lt;code&gt;gotToken&lt;/code&gt; event we have also defined previously, which sets the token in the model after getting it back from the custom element in its &lt;code&gt;decodeGotToken&lt;/code&gt; decoder.&lt;/p&gt;

&lt;p&gt;And, that&amp;#39;s it! If we run the application, everything should be working as before, yay!&lt;/p&gt;

&lt;p&gt;&lt;img src="/images/blog/phoenix-elm-landing-page/final-result.gif"
alt="Final result" style="background: #fff;" /&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;After watching Luke&amp;#39;s talk, I was looking forward to spending some free time playing around with &lt;strong&gt;Web Components&lt;/strong&gt; and checking by myself how they work and how they play with &lt;strong&gt;Elm&lt;/strong&gt;. After implementing the solution, and reviewing the code while writing this post, I have to admit that I  like a lot final result. Having all the functionality related to the component encapsulated in its own definition, and simply rendering it and managing messages using events as with any other HTML node is really cool, and this separation of concerns makes your &lt;strong&gt;Elm&lt;/strong&gt; code cleaner and easier to understand and maintain. Although it surely has some drawbacks like browser compatibility (which you can fix using a proper polyfill), I&amp;#39;m going to start using this solution in my current and future projects to explore its benefits and possible limitations more deeply. If you are curious about the final result, &lt;a href="https://github.com/bigardone/phoenix-and-elm-landing-page/commit/4e9e88037ba7679e6b20fbb942b1b5379db6f418"&gt;here is the commit&lt;/a&gt; with the needed changes.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Elixir and Phoenix basic passwordless and databaseless authentication (pt. 3)</title>
    <link rel="alternate" href="http://codeloveandboards.com/blog/2018/08/31/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-3/"/>
    <id>http://codeloveandboards.com/blog/2018/08/31/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-3/</id>
    <published>2018-08-31T07:00:00Z</published>
    <updated>2018-09-09T10:36:43+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;div class="index"&gt;
  &lt;p&gt;This post belongs to the &lt;strong&gt;Elixir and Phoenix basic passwordless and databaseless authentication&lt;/strong&gt; series.&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href="/blog/2018/06/09/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-1"&gt;Project setup and the initial functionality for storing and verifying authentication tokens&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/blog/2018/06/20/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-2"&gt;Sending authentication link emails and the user socket connection&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="/blog/2018/09/01/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-3"&gt;Setting up webpack as our asset bundler and the Elm single-page application&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

  &lt;a href="https://github.com/bigardone/passwordless-auth" target="_blank"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In the &lt;a href="/blog/2018/06/20/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-2"&gt;previous part&lt;/a&gt; of the series, we covered all the back-end logic regarding sending authentication emails and using the generated tokens to authenticate the connection of a &lt;strong&gt;Phoenix&lt;/strong&gt; socket. In this part, we are going to focus on the front-end, building the &lt;strong&gt;Elm&lt;/strong&gt; single page application skeleton, and using the websockect authentication to hide some parts of it to unauthenticated users. Let&amp;#39;s get cracking!&lt;/p&gt;

&lt;h2&gt;Front-end setup&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve been using &lt;strong&gt;Elixir&lt;/strong&gt; and &lt;strong&gt;Phoenix&lt;/strong&gt; in the back-end, and &lt;strong&gt;Elm&lt;/strong&gt; in the front-end, for almost three years already, and I&amp;#39;m delighted with the result. I tend to use Phoenix&amp;#39;s default asset bundler, &lt;a href="https://brunch.io/"&gt;Brunch&lt;/a&gt;, but I&amp;#39;ve been having some issues lately with it, especially while using its &lt;strong&gt;Elm&lt;/strong&gt; and &lt;strong&gt;SASS&lt;/strong&gt; plugins. Therefore, for this particular experiment, I wanted to test out other alternatives, replacing Brunch with &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt; and &lt;strong&gt;SASS&lt;/strong&gt; with &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;, which I&amp;#39;m starting to like a lot and seems like the first strong candidate to replace &lt;strong&gt;SASS&lt;/strong&gt; in my front-end stack. Recalling the &lt;a href="/blog/2018/06/09/elixir-and-phoenix-basic-passwordless-and-databaseless-authentication-pt-1"&gt;first part&lt;/a&gt; of the series, we created the project using the --no-brunch flag, which doesn&amp;#39;t install Brunch so that we can add &lt;strong&gt;webpack&lt;/strong&gt; directly. For that, I followed &lt;a href="http://www.schmitty.me/stack-setup-phoenix-elm-graphql-tailwindcss/"&gt;this great article&lt;/a&gt; from &lt;a href="https://twitter.com/_GazD"&gt;@_GazD&lt;/a&gt;, taking the parts that I needed and making some small changes to add &lt;strong&gt;Elm&lt;/strong&gt; support.&lt;/p&gt;

&lt;h3&gt;Adding webpack to the project&lt;/h3&gt;

&lt;p&gt;This being said, let&amp;#39;s start by adding a &lt;code&gt;package.json&lt;/code&gt; file to the &lt;code&gt;passwordless_auth_web&lt;/code&gt; application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;// apps/passwordless_auth_web/assets/package.json

{
  &amp;quot;repository&amp;quot;: {},
  &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;webpack --mode production&amp;quot;,
    &amp;quot;watch&amp;quot;: &amp;quot;webpack --mode development --watch&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;phoenix&amp;quot;: &amp;quot;file:../../../deps/phoenix&amp;quot;,
    &amp;quot;phoenix_html&amp;quot;: &amp;quot;file:../../../deps/phoenix_html&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;autoprefixer&amp;quot;: &amp;quot;^8.6.0&amp;quot;,
    &amp;quot;babel-core&amp;quot;: &amp;quot;^6.26.0&amp;quot;,
    &amp;quot;babel-loader&amp;quot;: &amp;quot;^7.1.3&amp;quot;,
    &amp;quot;babel-preset-env&amp;quot;: &amp;quot;^1.6.1&amp;quot;,
    &amp;quot;copy-webpack-plugin&amp;quot;: &amp;quot;^4.5.0&amp;quot;,
    &amp;quot;css-loader&amp;quot;: &amp;quot;^0.28.10&amp;quot;,
    &amp;quot;elm&amp;quot;: &amp;quot;^0.18.0&amp;quot;,
    &amp;quot;elm-webpack-loader&amp;quot;: &amp;quot;^4.5.0&amp;quot;,
    &amp;quot;mini-css-extract-plugin&amp;quot;: &amp;quot;^0.4.0&amp;quot;,
    &amp;quot;optimize-css-assets-webpack-plugin&amp;quot;: &amp;quot;^4.0.0&amp;quot;,
    &amp;quot;postcss-loader&amp;quot;: &amp;quot;^2.1.5&amp;quot;,
    &amp;quot;style-loader&amp;quot;: &amp;quot;^0.21.0&amp;quot;,
    &amp;quot;tailwindcss&amp;quot;: &amp;quot;^0.5.3&amp;quot;,
    &amp;quot;uglifyjs-webpack-plugin&amp;quot;: &amp;quot;^1.2.4&amp;quot;,
    &amp;quot;webpack&amp;quot;: &amp;quot;^4.10.0&amp;quot;,
    &amp;quot;webpack-cli&amp;quot;: &amp;quot;^3.0.0&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These are all the necessary dependencies that we need to add support for &lt;strong&gt;webpack&lt;em&gt;,&lt;/em&gt; **Elm&lt;/strong&gt; and &lt;strong&gt;Tailwind CSS&lt;/strong&gt;, although bear in mind that package versions might be outdated since I wrote this part. We can continue by adding the necessary configuration files:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ curl https://raw.githubusercontent.com/phoenixframework/phoenix/master/installer/templates/phx_assets/webpack/webpack.config.js &amp;gt; apps/passwordless_auth_web/assets/webpack.config.js
$ curl https://raw.githubusercontent.com/phoenixframework/phoenix/master/installer/templates/phx_assets/webpack/babelrc &amp;gt; apps/passwordless_auth_web/assets/.babelrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;#39;s continue by installing all the necessary dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cd apps/passwordless_auth_web/assets &amp;amp;&amp;amp; npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want &lt;strong&gt;Phoenix&lt;/strong&gt; to update the changes we make while developing, so let&amp;#39;s add the convenient watcher for this:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/config/dev.exs

use Mix.Config

config :passwordless_auth_web, PasswordlessAuthWeb.Endpoint,
  http: [port: 4000],
  debug_errors: true,
  code_reloader: true,
  check_origin: false,
  watchers: [
    node: [
      &amp;quot;node_modules/webpack/bin/webpack.js&amp;quot;,
      &amp;quot;--mode&amp;quot;,
      &amp;quot;development&amp;quot;,
      &amp;quot;--watch-stdin&amp;quot;,
      cd: Path.expand(&amp;quot;../assets&amp;quot;, __DIR__)
    ]
  ]

# ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Configuring Tailwind CSS&lt;/h3&gt;

&lt;p&gt;To generate Tailwind&amp;#39;s configuration file, we have to do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cd apps/passwordless_auth_web/assets &amp;amp;&amp;amp; ./node_modules/.bin/tailwind init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we have to make &lt;strong&gt;webpack&lt;/strong&gt; process &lt;strong&gt;CSS&lt;/strong&gt; and &lt;strong&gt;Tailwind&lt;/strong&gt; using &lt;strong&gt;postcss&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// apps/passwordless_auth_web/assets/webpack.config.js

const path = require(&amp;#39;path&amp;#39;);
const MiniCssExtractPlugin = require(&amp;#39;mini-css-extract-plugin&amp;#39;);
const UglifyJsPlugin = require(&amp;#39;uglifyjs-webpack-plugin&amp;#39;);
const OptimizeCSSAssetsPlugin = require(&amp;#39;optimize-css-assets-webpack-plugin&amp;#39;);
const CopyWebpackPlugin = require(&amp;#39;copy-webpack-plugin&amp;#39;);

module.exports = (env, options) =&amp;gt; ({
  optimization: {
    minimizer: [
      new UglifyJsPlugin({ cache: true, parallel: true, sourceMap: false }),
      new OptimizeCSSAssetsPlugin({}),
    ],
  },
  entry: &amp;#39;./js/app.js&amp;#39;,
  output: {
    filename: &amp;#39;app.js&amp;#39;,
    path: path.resolve(__dirname, &amp;#39;../priv/static/js&amp;#39;),
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: &amp;#39;babel-loader&amp;#39;,
        },
      },
      {
        test: /\.css$/,
        use: [MiniCssExtractPlugin.loader, &amp;#39;css-loader&amp;#39;, &amp;#39;postcss-loader&amp;#39;],
      }
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({ filename: &amp;#39;../css/app.css&amp;#39; }),
    new CopyWebpackPlugin([{ from: &amp;#39;static/&amp;#39;, to: &amp;#39;../&amp;#39; }]),
  ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// apps/passwordless_auth_web/assets/postcss.config.js

module.exports = {
  plugins: [
    require(&amp;#39;tailwindcss&amp;#39;)(&amp;#39;./tailwind.js&amp;#39;),
    require(&amp;#39;autoprefixer&amp;#39;)
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to import the main &lt;strong&gt;CSS&lt;/strong&gt; file in the main javascript file and add all the necessary &lt;strong&gt;Tailwind&lt;/strong&gt; hooks:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// apps/passwordless_auth_web/assets/js/app.js

import css from &amp;quot;../css/app.css&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="css"&gt;/* apps/passwordless_auth_web/assets/css/app.css */

@tailwind preflight;
@tailwind components;
@tailwind utilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Adding Elm support&lt;/h3&gt;

&lt;p&gt;To make &lt;strong&gt;Elm&lt;/strong&gt; work with &lt;strong&gt;webpack&lt;/strong&gt;, we need to edit its configuration file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// apps/passwordless_auth_web/assets/webpack.config.js

// ...

module.exports = (env, options) =&amp;gt; ({
  // ...

  module: {
    rules: [
      // ...
      {
        test: /\.elm$/,
        exclude: [&amp;#39;/elm-stuff/&amp;#39;, &amp;#39;/node_modules&amp;#39;],
        loader: &amp;#39;elm-webpack-loader&amp;#39;,
        options: {
          debug: true,
          warn: true,
          cwd: path.resolve(__dirname, &amp;#39;elm&amp;#39;),
        },
      },
    ],
    noParse: [/.elm$/],
  },
  plugins: [
    new MiniCssExtractPlugin({ filename: &amp;#39;../css/app.css&amp;#39; }),
    new CopyWebpackPlugin([{ from: &amp;#39;static/&amp;#39;, to: &amp;#39;../&amp;#39; }]),
  ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install all the necessary &lt;strong&gt;Elm&lt;/strong&gt; packages let&amp;#39;s add the following file:&lt;/p&gt;

&lt;pre&gt;&lt;code class="json"&gt;// apps/passwordless_auth_web/assets/elm/elm-package.json

{
    &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
    &amp;quot;summary&amp;quot;: &amp;quot;helpful summary of your project, less than 80 characters&amp;quot;,
    &amp;quot;repository&amp;quot;: &amp;quot;https://github.com/user/project.git&amp;quot;,
    &amp;quot;license&amp;quot;: &amp;quot;BSD3&amp;quot;,
    &amp;quot;source-directories&amp;quot;: [
        &amp;quot;./src&amp;quot;,
        &amp;quot;./vendor&amp;quot;
    ],
    &amp;quot;exposed-modules&amp;quot;: [],
    &amp;quot;dependencies&amp;quot;: {
        &amp;quot;NoRedInk/elm-decode-pipeline&amp;quot;: &amp;quot;3.0.0 &amp;lt;= v &amp;lt; 4.0.0&amp;quot;,
        &amp;quot;elm-lang/core&amp;quot;: &amp;quot;5.1.1 &amp;lt;= v &amp;lt; 6.0.0&amp;quot;,
        &amp;quot;elm-lang/html&amp;quot;: &amp;quot;2.0.0 &amp;lt;= v &amp;lt; 3.0.0&amp;quot;,
        &amp;quot;elm-lang/http&amp;quot;: &amp;quot;1.0.0 &amp;lt;= v &amp;lt; 2.0.0&amp;quot;,
        &amp;quot;elm-lang/navigation&amp;quot;: &amp;quot;2.1.0 &amp;lt;= v &amp;lt; 3.0.0&amp;quot;,
        &amp;quot;elm-lang/websocket&amp;quot;: &amp;quot;1.0.2 &amp;lt;= v &amp;lt; 2.0.0&amp;quot;,
        &amp;quot;evancz/url-parser&amp;quot;: &amp;quot;2.0.1 &amp;lt;= v &amp;lt; 3.0.0&amp;quot;
    },
    &amp;quot;elm-version&amp;quot;: &amp;quot;0.18.0 &amp;lt;= v &amp;lt; 0.19.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And run the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;$ cd apps/passwordless_auth_web/assets/elm &amp;amp;&amp;amp; elm package install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can add a very basic &lt;strong&gt;Elm&lt;/strong&gt; application to check that everything is working as expected:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Main.elm

module Main exposing (..)

import Html exposing (Html)


type alias Model =
    {}


init : ( Model, Cmd Msg )
init =
    {} ! []


type Msg
    = Noop


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        Noop -&amp;gt;
            model ! []


view : Model -&amp;gt; Html Msg
view model =
    Html.text &amp;quot;Hello from Elm!&amp;quot;


subscriptions : Model -&amp;gt; Sub Msg
subscriptions model =
    Sub.none


main : Program Never Model Msg
main =
    Html.program
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We probably still have the default layout template from &lt;strong&gt;Phoenix&lt;/strong&gt;, so let&amp;#39;s replace its content with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- apps/passwordless_auth_web/lib/passwordless_auth_web/templates/layout/app.html.eex  --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;%= static_path(@conn, &amp;quot;/css/app.css&amp;quot;) %&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Passwordless Auth&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;

  &amp;lt;body&amp;gt;
    &amp;lt;%= render @view_module, @view_template, assigns %&amp;gt;
    &amp;lt;script src=&amp;quot;&amp;lt;%= static_path(@conn, &amp;quot;/js/app.js&amp;quot;) %&amp;gt;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also need to add the container in which we are going to render the &lt;strong&gt;Elm&lt;/strong&gt; application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;!-- apps/passwordless_auth_web/lib/passwordless_auth_web/templates/page/index.html.eex --&amp;gt;

&amp;lt;div id=&amp;quot;elm-main&amp;quot; class=&amp;quot;flex items-center justify-center h-screen&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, create the &lt;strong&gt;Elm&lt;/strong&gt; application and render it in its container:&lt;/p&gt;

&lt;pre&gt;&lt;code class="javascript"&gt;// apps/passwordless_auth_web/assets/js/app.js

import css from &amp;#39;../css/app.css&amp;#39;;
import Elm from &amp;#39;../elm/src/Main.elm&amp;#39;;

const elmDiv = document.getElementById(&amp;#39;elm-main&amp;#39;);

if (elmDiv) {
  const app = Elm.Main.embed(elmDiv);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we are ready to start Phoenix&amp;#39;s server, visit &lt;a href="http://localhost:4000"&gt;http://localhost:4000&lt;/a&gt; and watch our basic &lt;strong&gt;Elm&lt;/strong&gt; application render correctly, yay!&lt;/p&gt;

&lt;p&gt;&lt;img alt="Basic application" src="https://monosnap.com/image/hOk7G1IDEdtHhSdEBwTu5ZK3rhLvHz" /&gt;&lt;/p&gt;

&lt;p&gt;There is one thing left to do though. We are going to use the &lt;a href="https://github.com/saschatimme/elm-phoenix"&gt;elm-phoenix&lt;/a&gt; library to handle &lt;strong&gt;Phoenix&lt;/strong&gt; sockets communication, therefore we need to download the content of &lt;a href="https://github.com/bigardone/passwordless-auth/tree/master/apps/passwordless_auth_web/assets/elm/vendor"&gt;this folder&lt;/a&gt; and place it in the &lt;code&gt;apps/passwordless_auth_web/assets/elm/vendor&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2&gt;Building the Elm application&lt;/h2&gt;

&lt;p&gt;Now that our basic &lt;strong&gt;Elm&lt;/strong&gt; application is working let&amp;#39;s make some changes to the &lt;strong&gt;Phoenix&lt;/strong&gt; controller and template in charge of rendering it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/lib/passwordless_auth_web/controllers/page_controller.ex

defmodule PasswordlessAuthWeb.PageController do
  use PasswordlessAuthWeb, :controller

  def index(conn, params) do
    conn
    |&amp;gt; assign(:token, Map.get(params, &amp;quot;token&amp;quot;, &amp;quot;&amp;quot;))
    |&amp;gt; render(&amp;quot;index.html&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first change consists of assigning the received &lt;code&gt;token&lt;/code&gt; value from the authentication link to the connection so that we can pass it to the &lt;strong&gt;Elm&lt;/strong&gt; application as a flag. We also need to pass the socket URL, so let&amp;#39;s create a helper function for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/lib/passwordless_auth_web/views/page_view.ex

defmodule PasswordlessAuthWeb.PageView do
  use PasswordlessAuthWeb, :view

  def socket_url do
    PasswordlessAuthWeb.Endpoint.url()
    |&amp;gt; String.replace(&amp;quot;http&amp;quot;, &amp;quot;ws&amp;quot;)
    |&amp;gt; Kernel.&amp;lt;&amp;gt;(&amp;quot;/socket/websocket&amp;quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can set these two values in the template:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/lib/passwordless_auth_web/templates/page/index.html.eex

&amp;lt;div id=&amp;quot;elm-main&amp;quot; class=&amp;quot;flex items-center justify-center h-screen&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script&amp;gt;
  window.token = &amp;#39;&amp;lt;%= @token %&amp;gt;&amp;#39;;
  window.socketUrl = &amp;#39;&amp;lt;%= socket_url() %&amp;gt;&amp;#39;;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally pass them as flags in the Elm application:&lt;/p&gt;

&lt;pre&gt;&lt;code class="js"&gt;// apps/passwordless_auth_web/assets/js/app.js

import Elm from &amp;#39;../elm/src/Main.elm&amp;#39;;
import css from &amp;#39;../css/app.css&amp;#39;;

const elmDiv = document.getElementById(&amp;#39;elm-main&amp;#39;);

let token = window.token;
const socketUrl = window.socketUrl;

if (token === &amp;#39;&amp;#39; || token == null) token = window.localStorage.getItem(&amp;#39;token&amp;#39;);

if (elmDiv) {
  const app = Elm.Main.embed(elmDiv, { token, socketUrl });

  app.ports.saveToken.subscribe((token) =&amp;gt; {
    window.localStorage.setItem(&amp;#39;token&amp;#39;, token);
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have also added a port for saving the token into &lt;code&gt;localStorage&lt;/code&gt;, that we are going to use later on.&lt;/p&gt;

&lt;p&gt;Before continuing any further, let&amp;#39;s take a moment to think about what we are building, using the following mock image:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Routes" src="https://monosnap.com/image/Isrs18qTVpNMYfWcXNuq9RbvG7Z4nS.png" /&gt;&lt;/p&gt;

&lt;p&gt;To test out our passwordless authentication experiment, we only need a couple of screens and routes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; which is only accessible by authenticated users, and can potentially have any private data we want to display.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/sign-in&lt;/code&gt; which is public, renders the form to request the magic link, and is where we are redirecting any user that tries to navigate to &lt;code&gt;/&lt;/code&gt; without being properly authenticated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Having this in mind, we can start by implementing the routing module, so we can add these two routes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Route.elm


module Route
    exposing
        ( Route(..)
        , fromLocation
        , newUrl
        )

import Navigation exposing (Location)
import UrlParser as Url exposing ((&amp;lt;/&amp;gt;), Parser, oneOf, s, string, parsePath)


-- ROUTING --


type Route
    = SignInRoute
    | LobbyRoute


matchers : Parser (Route -&amp;gt; a) a
matchers =
    oneOf
        [ Url.map LobbyRoute &amp;lt;| s &amp;quot;&amp;quot;
        , Url.map SignInRoute &amp;lt;| s &amp;quot;sign-in&amp;quot;
        ]



-- INTERNAL --


routeToString : Route -&amp;gt; String
routeToString page =
    let
        pieces =
            case page of
                LobbyRoute -&amp;gt;
                    []

                SignInRoute -&amp;gt;
                    [ &amp;quot;sign-in&amp;quot; ]
    in
        &amp;quot;/&amp;quot; ++ String.join &amp;quot;/&amp;quot; pieces



-- PUBLIC HELPERS --


newUrl : Route -&amp;gt; Cmd msg
newUrl =
    routeToString &amp;gt;&amp;gt; Navigation.newUrl


fromLocation : Location -&amp;gt; Maybe Route
fromLocation location =
    parsePath matchers location
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have defined the routes that we need, let&amp;#39;s move on to the main elm module and start coding the application. In many of my &lt;strong&gt;Elm&lt;/strong&gt; projects and tutorials, I&amp;#39;ve been organizing all the &lt;strong&gt;Elm&lt;/strong&gt; code in folders, creating one for each route. Inside of these folders, I tended to add four different files, one for each of the Model, Messages, Update and View modules of that route. This approach used to work fine for small projects, but it didn&amp;#39;t scale that well for bigger ones. Then I read &lt;a href="https://twitter.com/rtfeldman"&gt;Richard Feldman&amp;#39;s&lt;/a&gt; article &lt;a href="https://dev.to/rtfeldman/tour-of-an-open-source-elm-spa"&gt;Tour of an Open-Source Elm SPA&lt;/a&gt;, and I have started to organize my new &lt;strong&gt;Elm&lt;/strong&gt; projects following his recommendations, feeling more comfortable now when they start to grow.&lt;/p&gt;

&lt;h3&gt;The Page modules&lt;/h3&gt;

&lt;p&gt;Although this is a very small project, we will stick to Richard&amp;#39;s approach, therefore let&amp;#39;s get started by defining the page modules that define the logic for each screen for the application, and which we will use from the main module depending on which is the current page set in the application.&lt;/p&gt;

&lt;h4&gt;Page.SignIn&lt;/h4&gt;

&lt;p&gt;The first page we are implementing is the sign-in page. The goal is to define everything we need as it was a standalone &lt;strong&gt;Elm&lt;/strong&gt; program, except that it does not have a view function, and the entry point can be either an init function to load any necessary data from the backend or its initial model:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Page/SignIn.elm

module Page.SignIn
    exposing
        ( Model
        , SignInForm(..)
        , Msg(..)
        , update
        , initialModel
        )

import Http
import Json.Encode as Encode
import Json.Decode as Decode
import Request.Token exposing (requestToken)


-- MODEL --


type SignInForm
    = Editing String
    | Sending String
    | Success String
    | Error String


type alias Model =
    { form : SignInForm }


initialModel : Model
initialModel =
    { form = Editing &amp;quot;&amp;quot; }



-- UPDATE --


type Msg
    = HandleEmailInput String
    | HandleFormSubmit
    | FormSubmitResponse (Result Http.Error String)


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg ({ form } as model) =
    case ( msg, form ) of
        ( HandleEmailInput value, Editing _ ) -&amp;gt;
            { model | form = Editing value } ! []

        ( HandleFormSubmit, Editing email ) -&amp;gt;
            { model | form = Sending email } ! [ requestToken FormSubmitResponse email ]

        ( FormSubmitResponse payload, Sending _ ) -&amp;gt;
            case payload of
                Ok message -&amp;gt;
                    { model | form = Success message } ! []

                _ -&amp;gt;
                    { model | form = Error &amp;quot;We couldn&amp;#39;t sent you your magic link due to an error, please try again later.&amp;quot; } ! []

        _ -&amp;gt;
            model ! []


requestToken : (Result Http.Error String -&amp;gt; msg) -&amp;gt; String -&amp;gt; Cmd msg
requestToken msg email =
    let
        body =
            Encode.object [ ( &amp;quot;email&amp;quot;, Encode.string email ) ]

        request =
            Http.request
                { method = &amp;quot;POST&amp;quot;
                , headers = []
                , url = &amp;quot;/api/auth&amp;quot;
                , body = Http.jsonBody body
                , expect = Http.expectJson requestTokenDecoder
                , timeout = Nothing
                , withCredentials = False
                }
    in
        Http.send msg request


requestTokenDecoder : Decode.Decoder String
requestTokenDecoder =
    Decode.at [ &amp;quot;message&amp;quot; ] Decode.string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Model&lt;/code&gt; for this page consists of a record with a &lt;code&gt;form&lt;/code&gt; custom type that represents the different states that we need in the sign-in form:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Editing String&lt;/code&gt; when the user is typing so we can store the value typed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sending String&lt;/code&gt; when the user submits the form so we can, for instance, render a spinner in the submit button.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Success String&lt;/code&gt; which means a successful form submission, and the &lt;code&gt;String&lt;/code&gt; received from the server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error String&lt;/code&gt; if anything goes wrong, and we want to show an error message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; function is very simple too, handling the following messages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HandleEmailInput String&lt;/code&gt; when the form email input changes its value, storing it in the model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HandleFormSubmit&lt;/code&gt; sends the &lt;code&gt;requestToken&lt;/code&gt; HTTP request.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FormSubmitResponse (Result Http.Error String)&lt;/code&gt; which handles the response from the previous HTTP request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Page.Lobby&lt;/h4&gt;

&lt;p&gt;The other page we need to implement is the one we want to display only to authenticated users:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Page/Lobby.elm

module Page.Lobby exposing ( Model , Msg(..) , init , update)

import Json.Decode as Decode exposing (Value)
import Phoenix
import Phoenix.Push as Push exposing (Push)


-- MODEL --


type alias Model =
    { emails : List String }


initialModel : Model
initialModel =
    { emails = [] }



-- UPDATE --


type Msg
    = HandleInitSuccess Decode.Value


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg model =
    case msg of
        HandleInitSuccess payload -&amp;gt;
            case Decode.decodeValue usersDecoder payload of
                Ok emails -&amp;gt;
                    { model | emails = emails } ! []

                Err _ -&amp;gt;
                    model ! []


usersDecoder : Decode.Decoder (List String)
usersDecoder =
    Decode.at [ &amp;quot;data&amp;quot; ] &amp;lt;| Decode.list Decode.string



-- INIT --


init : String -&amp;gt; ( Model, Cmd Msg )
init socketUrl =
    ( initialModel
    , Push.init &amp;quot;admin:lobby&amp;quot; &amp;quot;data&amp;quot;
        |&amp;gt; Push.onOk HandleInitSuccess
        |&amp;gt; Phoenix.push socketUrl
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For simplicity&amp;#39;s sake, the &lt;code&gt;Model&lt;/code&gt; consists of a list of strings representing the list of emails able to authenticate into the application. The &lt;code&gt;init&lt;/code&gt; function, called every time an authenticated user visits the &lt;code&gt;/&lt;/code&gt; route, receives the &lt;code&gt;socketUrl&lt;/code&gt; and pushes a &lt;code&gt;data&lt;/code&gt; message to the &lt;code&gt;admin:lobby&lt;/code&gt; channel through the socket (already connected, we&amp;#39;ll get there in a minute). If the message result is successful, it receives the list of emails, handled by the &lt;code&gt;HandleInitSuccess&lt;/code&gt; message, decodes the list and sets it as the new &lt;code&gt;Model&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;The Views modules&lt;/h3&gt;

&lt;p&gt;Having the main Page modules done, let&amp;#39;s focus now on the view modules for them.
Taking a look at the &lt;code&gt;Lobby&lt;/code&gt; page, we can see that there is a navigation bar on top, with the signout link. This navigation bar will appear in all the future private screen that we might implement, so we need to share it somehow.&lt;/p&gt;

&lt;h4&gt;Views.Page&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s add a basic module that wraps each particular view content in a container along with the navigation bar:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Views/Page.elm

module Views.Page
    exposing
        ( frameView
        , headerView
        , Msg(..)
        )

import Data.Session exposing (Session(..))
import Html exposing (Html)
import Html.Attributes as Html
import Html.Events as Html


type Msg
    = SignOut


frameView : Session -&amp;gt; Html msg -&amp;gt; Html msg -&amp;gt; Html msg
frameView session header content =
    case session of
        Anonymous -&amp;gt;
            Html.text &amp;quot;&amp;quot;

        Authenticated _ -&amp;gt;
            Html.div
                [ Html.class &amp;quot;main-section flex-1 flex-col flex h-screen&amp;quot; ]
                [ header
                , Html.div
                    [ Html.class &amp;quot;main-content bg-grey-lightest flex-1 flex items-center justify-center&amp;quot; ]
                    [ content ]
                ]


headerView : Html Msg
headerView =
    Html.header
        [ Html.class &amp;quot;main-header&amp;quot; ]
        [ Html.nav
            [ Html.class &amp;quot;flex justify-between&amp;quot; ]
            [ Html.span
                [ Html.class &amp;quot;flex-1 p-4 text-white text-left&amp;quot; ]
                [ Html.text &amp;quot;Admin panel&amp;quot; ]
            , Html.a
                [ Html.class &amp;quot;p-4&amp;quot;
                , Html.onClick SignOut
                ]
                [ Html.text &amp;quot;Sign out&amp;quot; ]
            ]
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It exposes two functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;frameView&lt;/code&gt; which defines the structure of all private screens.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headerView&lt;/code&gt; which renders the top navigation bar, with the sign-out link.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;frameView&lt;/code&gt; takes a &lt;code&gt;Session&lt;/code&gt;, so we can render the contents only when the user is authenticated, and both the &lt;code&gt;header&lt;/code&gt; and the &lt;code&gt;content&lt;/code&gt; for the particular page it is rendering.&lt;/p&gt;

&lt;h4&gt;Views.SignIn&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s add the view module for the &lt;code&gt;SignIn&lt;/code&gt; page.&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Views/SignIn.elm

module Views.SignIn exposing (view)

import Html exposing (Html, form)
import Html.Attributes as Html
import Html.Events as Html
import Page.SignIn exposing (Model, SignInForm(..), Msg(..))


view : Model -&amp;gt; Html Msg
view { form } =
    let
        content =
            case form of
                Editing email -&amp;gt;
                    formView email

                Sending email -&amp;gt;
                    formView email

                Success text -&amp;gt;
                    successMessageView text

                Error text -&amp;gt;
                    errorMessageView text
    in
        Html.section
            [ Html.class &amp;quot;bg-purple-darker p-8 flex flex-1 items-center justify-center h-screen&amp;quot; ]
            [ content ]


formView : String -&amp;gt; Html Msg
formView email =
    Html.div
        []
        [ Html.img
            [ Html.src &amp;quot;/images/icons8-mailbox-128.png&amp;quot;
            , Html.class &amp;quot;mb-4 slide-in-blurred-top&amp;quot;
            ]
            []
        , Html.h3
            []
            [ Html.text &amp;quot;Password long? Hard to type?&amp;quot; ]
        , Html.p
            []
            [ Html.text &amp;quot;Get a magic link sent to your email that&amp;#39;ll sign you instantly!&amp;quot; ]
        , form
            [ Html.class &amp;quot;w-full max-w-md&amp;quot;
            , Html.onSubmit HandleFormSubmit
            ]
            [ Html.input
                [ Html.class &amp;quot;appearance-none block w-full bg-grey-lighter text-grey-darker rounded py-3 px-4 mb-3&amp;quot;
                , Html.placeholder &amp;quot;foo@email.com&amp;quot;
                , Html.type_ &amp;quot;email&amp;quot;
                , Html.onInput HandleEmailInput
                , Html.value email
                ]
                []
            , Html.button
                [ Html.class &amp;quot;bg-blue hover:bg-blue-dark text-white py-3 px-4 mb-3 rounded w-full&amp;quot; ]
                [ Html.text &amp;quot;Send Magic Link&amp;quot; ]
            ]
        ]


successMessageView : String -&amp;gt; Html Msg
successMessageView message =
    Html.div
        []
        [ Html.img
            [ Html.src &amp;quot;/images/icons8-postal-128.png&amp;quot;
            , Html.class &amp;quot;mb-4 jello-horizontal&amp;quot;
            ]
            []
        , Html.h3
            []
            [ Html.text &amp;quot;Check your email&amp;quot; ]
        , Html.p
            []
            [ Html.text message ]
        ]


errorMessageView : String -&amp;gt; Html Msg
errorMessageView message =
    Html.div
        []
        [ Html.h3
            []
            [ Html.text &amp;quot;Whoops!&amp;quot; ]
        , Html.p
            []
            [ Html.text message ]
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;view&lt;/code&gt; function returns the content to render, depending on the value of the custom type we created previously for the model&amp;#39;s form.&lt;/p&gt;

&lt;h4&gt;View.Lobby&lt;/h4&gt;

&lt;p&gt;The next view we are going to implement is the view for the &lt;code&gt;Lobby&lt;/code&gt; page, so let&amp;#39;s go ahead and add it:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Views/Lobby.elm

module Views.Lobby exposing (view)

import Html exposing (Html, form)
import Html.Keyed
import Html.Attributes as Html
import Data.Session exposing (User)
import Page.Lobby exposing (Model, Msg(..))


view : User -&amp;gt; Model -&amp;gt; Html Msg
view { email } model =
    Html.div
        []
        [ Html.img
            [ Html.src &amp;quot;/images/icons8-confetti-128.png&amp;quot;
            , Html.class &amp;quot;mb-4 jello-horizontal&amp;quot;
            ]
            []
        , Html.h3
            []
            [ Html.text &amp;lt;| &amp;quot;Welcome &amp;quot; ++ email ++ &amp;quot;!&amp;quot; ]
        , Html.p
            []
            [ Html.text &amp;quot;You signed in successfully.&amp;quot; ]
        , Html.p
            []
            [ Html.text &amp;quot;List of authorized users:&amp;quot; ]
        , model
            |&amp;gt; List.map emailView
            |&amp;gt; Html.Keyed.ul [ Html.class &amp;quot;inline-block m-0 p-0&amp;quot; ]
        ]


emailView : String -&amp;gt; ( String, Html Msg )
emailView email =
    ( email
    , Html.li
        []
        [ Html.text email ]
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Its &lt;code&gt;view&lt;/code&gt; function receives the current &lt;code&gt;User&lt;/code&gt; and its model, which consists of a list of emails, and renders them in the screen.&lt;/p&gt;

&lt;h4&gt;View.NotFound&lt;/h4&gt;

&lt;p&gt;Finally, let&amp;#39;s add the view to render unexisting pages, in case the user visits a wrong route:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Views/NotFound.elm

module Views.NotFound exposing (view)

import Html exposing (Html, form)


view : Html msg
view =
    Html.div
        []
        [ Html.h1
            []
            [ Html.text &amp;quot;404&amp;quot; ]
        , Html.p
            []
            [ Html.text &amp;quot;Page not found&amp;quot; ]
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;The Main module&lt;/h3&gt;

&lt;p&gt;With our page specific logic and views, we can start editing the &lt;code&gt;Main&lt;/code&gt; module. As this module is quite big, let&amp;#39;s split it into different chunks of code.&lt;/p&gt;

&lt;h4&gt;The model section&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;module Main exposing (main)

import Data.Session exposing (Session(..))
import Html exposing (Html, form, map)
import Json.Decode as Decode exposing (Value)
import Navigation exposing (Location)
import Page.Lobby
import Page.SignIn
import Phoenix
import Phoenix.Channel as Channel exposing (Channel)
import Phoenix.Push as Push exposing (Push)
import Phoenix.Socket as Socket exposing (AbnormalClose, Socket)
import Ports
import Route exposing (Route(..))
import Views.Lobby
import Views.Page
import Views.SignIn



-- MODEL --


type ConnectionStatus
    = Connecting
    | Connected ChannelState
    | Disconnected


type ChannelState
    = Joining
    | Joined
    | Left


type Page
    = BlankPage
    | NotFoundPage
    | SignInPage Page.SignIn.Model
    | LobbyPage Page.Lobby.Model


type alias Flags =
    { token : Maybe String
    , socketUrl : String
    }


type alias Model =
    { page : Page
    , session : Session
    , connectionStatus : ConnectionStatus
    , flags : Flags
    }
-- ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main &lt;code&gt;Model&lt;/code&gt; consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;page&lt;/code&gt; which is a custom type representing the current &lt;code&gt;Page&lt;/code&gt; state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt; which holds information about the authenticated user.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connectionStatus&lt;/code&gt; which is another custom type representing the status of the socket connection and the channel state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flags&lt;/code&gt; which stores the configuration data passed from the outside while initializing the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;The update section&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- UPDATE --


type Msg
    = SetRoute (Maybe Route)
    | ConnectionStatusChanged ConnectionStatus
    | HandleAdminChannelJoin Decode.Value
    | ViewsPageMsg Views.Page.Msg
    | HandleSignOutSuccess Decode.Value
    | PageSignInMsg Page.SignIn.Msg
    | PageLobbyMsg Page.Lobby.Msg


update : Msg -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
update msg ({ flags, page } as model) =
    let
        { socketUrl } =
            flags

        toPage toModel toMsg subUpdate subMsg subModel =
            let
                ( newModel, newCmd ) =
                    subUpdate subMsg subModel
            in
            ( { model | page = toModel newModel }, Cmd.map toMsg newCmd )
    in
    case ( msg, page ) of
        ( SetRoute route, _ ) -&amp;gt;
            setRoute route model

        ( ConnectionStatusChanged connectionStatus, _ ) -&amp;gt;
            let
                cmds =
                    case connectionStatus of
                        Disconnected -&amp;gt;
                            [ Route.newUrl SignInRoute
                            , Ports.saveToken Nothing
                            ]

                        _ -&amp;gt;
                            []
            in
            { model | connectionStatus = connectionStatus } ! cmds

        ( HandleAdminChannelJoin payload, _ ) -&amp;gt;
            case Decode.decodeValue Data.Session.decoder payload of
                Ok user -&amp;gt;
                    { model
                        | session =
                            Authenticated user
                        , connectionStatus = Connected Joined
                    }
                        ! [ Ports.saveToken model.flags.token ]

                Err error -&amp;gt;
                    let
                        _ =
                            Debug.log &amp;quot;Error&amp;quot; error
                    in
                    model ! []

        ( HandleSignOutSuccess _, _ ) -&amp;gt;
            { model
                | connectionStatus = Disconnected
                , session = Anonymous
            }
                ! [ Route.newUrl SignInRoute, Ports.saveToken Nothing ]

        ( ViewsPageMsg subMsg, _ ) -&amp;gt;
            case subMsg of
                Views.Page.SignOut -&amp;gt;
                    model
                        ! [ Push.init &amp;quot;admin:lobby&amp;quot; &amp;quot;sign_out&amp;quot;
                                |&amp;gt; Push.onOk HandleSignOutSuccess
                                |&amp;gt; Phoenix.push socketUrl
                          ]

        ( ViewsPageMsg subMsg, _ ) -&amp;gt;
            case subMsg of
                Views.Page.SignOut -&amp;gt;
                    model
                        ! [ Push.init &amp;quot;admin:lobby&amp;quot; &amp;quot;sign_out&amp;quot;
                                |&amp;gt; Push.onOk HandleSignOutSuccess
                                |&amp;gt; Phoenix.push socketUrl
                          ]

        ( PageSignInMsg subMsg, SignInPage subModel ) -&amp;gt;
            toPage SignInPage PageSignInMsg Page.SignIn.update subMsg subModel

        ( PageLobbyMsg subMsg, LobbyPage subModel ) -&amp;gt;
            toPage LobbyPage PageLobbyMsg Page.Lobby.update subMsg subModel

        ( _, _ ) -&amp;gt;
            model ! []


setRoute : Maybe Route -&amp;gt; Model -&amp;gt; ( Model, Cmd Msg )
setRoute maybeRoute ({ connectionStatus, session, flags } as model) =
    let
        transition init page toMsg =
            let
                ( subModel, subCmd ) =
                    init
            in
            { model | page = page subModel } ! [ Cmd.map toMsg subCmd ]
    in
    case maybeRoute of
        Nothing -&amp;gt;
            { model | page = NotFoundPage } ! [ Cmd.none ]

        Just SignInRoute -&amp;gt;
            { model | page = SignInPage Page.SignIn.initialModel } ! [ Cmd.none ]

        Just LobbyRoute -&amp;gt;
            case connectionStatus of
                Disconnected -&amp;gt;
                    model ! [ Route.newUrl SignInRoute ]

                _ -&amp;gt;
                    transition (Page.Lobby.init flags.socketUrl) LobbyPage PageLobbyMsg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; function evaluates the current &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;page&lt;/code&gt;, and depending on the combination takes one of the following actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;( SetRoute route, _ )&lt;/code&gt; means a route change, so it calls the &lt;code&gt;setRoute&lt;/code&gt; function to initialize the page state depending on the new route.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( ConnectionStatusChanged connectionStatus, _ )&lt;/code&gt; handles changes in the socket connection, and calls a port to delete the stored authentication token from &lt;code&gt;localStorage&lt;/code&gt; and redirects to the &lt;code&gt;SignInRoute&lt;/code&gt; route, and sets the new connection status in the model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( HandleAdminChannelJoin payload, _ )&lt;/code&gt; handles the success of joining the admin channel, setting the user&amp;#39;s data into the &lt;code&gt;session&lt;/code&gt; key of the model, and changing the connection state to the proper one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( HandleSignOutSuccess _, _ )&lt;/code&gt; sets &lt;code&gt;connectionStatus&lt;/code&gt; to disconnected, resets the session user to &lt;code&gt;Nothing&lt;/code&gt;, calls the port to delete the token and redirect to the &lt;code&gt;SignInRoute&lt;/code&gt; route.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( ViewsPageMsg subMsg, _ )&lt;/code&gt; checks for &lt;code&gt;Views.Page.SignOut&lt;/code&gt; messages, sent by clicking on the sign-out link of the header and sends a &lt;code&gt;sign_out&lt;/code&gt; message to the admin channel through the socket.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( PageSignInMsg subMsg, SignInPage subModel )&lt;/code&gt; and &lt;code&gt;( PageLobbyMsg subMsg, LobbyPage subModel )&lt;/code&gt; update the current page state using their corresponding update function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;setRoute&lt;/code&gt; function takes care of two different things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It initializes the current route page model.&lt;/li&gt;
&lt;li&gt;Redirects to the &lt;code&gt;SignInRoute&lt;/code&gt; route if the user is not connected to the socket, which means that is not authenticated.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;The view section&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- VIEW --


view : Model -&amp;gt; Html Msg
view { session, page } =
    let
        header =
            Html.map ViewsPageMsg Views.Page.headerView

        frame =
            Views.Page.frameView session header
    in
    case ( page, session ) of
        ( SignInPage subModel, _ ) -&amp;gt;
            map PageSignInMsg (Views.SignIn.view subModel)

        ( LobbyPage subModel, Authenticated user ) -&amp;gt;
            frame &amp;lt;| map PageLobbyMsg (Views.Lobby.view user subModel)

        ( NotFoundPage, Authenticated _ ) -&amp;gt;
            frame Views.NotFound.view

        _ -&amp;gt;
            frame &amp;lt;| Html.text &amp;quot;View not implemented yet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;view&lt;/code&gt; function takes the current model, and depending on the current &lt;code&gt;page&lt;/code&gt; and &lt;code&gt;session&lt;/code&gt;, renders the necessary view wrapping it with the &lt;code&gt;frame&lt;/code&gt; or not.&lt;/p&gt;

&lt;h4&gt;The subscriptions section&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- SUBSCRIPTIONS --


socket : Flags -&amp;gt; Socket Msg
socket { socketUrl, token } =
    Socket.init socketUrl
        |&amp;gt; Socket.withParams [ ( &amp;quot;token&amp;quot;, Maybe.withDefault &amp;quot;&amp;quot; token ) ]
        |&amp;gt; Socket.onOpen (ConnectionStatusChanged (Connected Joining))
        |&amp;gt; Socket.onClose (\_ -&amp;gt; ConnectionStatusChanged Disconnected)
        |&amp;gt; Socket.withDebug


subscriptions : Model -&amp;gt; Sub Msg
subscriptions { connectionStatus, flags } =
    let
        { token } =
            flags

        adminChannel =
            Channel.init &amp;quot;admin:lobby&amp;quot;
                |&amp;gt; Channel.onJoin HandleAdminChannelJoin
                |&amp;gt; Channel.withDebug
    in
    case connectionStatus of
        Disconnected -&amp;gt;
            Sub.none

        _ -&amp;gt;
            Phoenix.connect (socket flags) [ adminChannel ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the &lt;code&gt;connectionStatus&lt;/code&gt; it tries to connect to the &lt;strong&gt;Phoenix&lt;/strong&gt; &lt;code&gt;Socket&lt;/code&gt;, changing the status to &lt;code&gt;Connected Joining&lt;/code&gt; if the server-side authentication is successful. On the contrary, it sets it to &lt;code&gt;Disconnected&lt;/code&gt; which redirects to the sign-in page as we have previously seen.&lt;/p&gt;

&lt;h4&gt;The main and init section&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- MAIN AND INIT --


init : Flags -&amp;gt; Location -&amp;gt; ( Model, Cmd Msg )
init flags location =
    let
        ( model, cmd ) =
            setRoute (Route.fromLocation location)
                { page = BlankPage
                , session = Anonymous
                , connectionStatus = Connecting
                , flags = flags
                }
    in
    model ! [ cmd ]


main : Program Flags Model Msg
main =
    Navigation.programWithFlags (Route.fromLocation &amp;gt;&amp;gt; SetRoute)
        { init = init
        , view = view
        , update = update
        , subscriptions = subscriptions
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;main&lt;/code&gt; returns a &lt;code&gt;Navigation.programWithFlags&lt;/code&gt; application, the &lt;code&gt;init&lt;/code&gt; function takes the received &lt;code&gt;Flags&lt;/code&gt; and a &lt;code&gt;Location&lt;/code&gt;, calling &lt;code&gt;setRoute&lt;/code&gt; to initialize the application&amp;#39;s state depending on the current route.&lt;/p&gt;

&lt;h3&gt;Additional stuff&lt;/h3&gt;

&lt;p&gt;We have almost covered everything excepting two missing modules:&lt;/p&gt;

&lt;h4&gt;The Ports module&lt;/h4&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Ports.elm

port module Ports exposing (saveToken)


port saveToken : Maybe String -&amp;gt; Cmd msg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;saveToken&lt;/code&gt; is a port, which sends the valid authentication token, or an empty one, to the main &lt;code&gt;app.js&lt;/code&gt; script where it is stored using &lt;code&gt;localStorage&lt;/code&gt;. The reason for this behaviour is that we want to reuse the valid token to reconnect if the user refreshes the browser, or delete it in case the user signs out.&lt;/p&gt;

&lt;h4&gt;The Data.Session module&lt;/h4&gt;

&lt;p&gt;As we are using &lt;code&gt;Session&lt;/code&gt; all over the place, and to prevent circular dependencies, it makes sense having everything related to &lt;code&gt;Session&lt;/code&gt; in its own module.&lt;/p&gt;

&lt;pre&gt;&lt;code class="elm"&gt;-- apps/passwordless_auth_web/assets/elm/src/Data/Session.elm

module Data.Session exposing
    ( Session(..)
    , User
    , decoder
    , encode
    )

import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (decode, required)
import Json.Encode as Encode exposing (Value)


type alias User =
    { email : String }


type Session
    = Anonymous
    | Authenticated User



-- SERIALIZATION --


decoder : Decoder User
decoder =
    decode User
        |&amp;gt; required &amp;quot;email&amp;quot; Decode.string


encode : User -&amp;gt; Decode.Value
encode user =
    Encode.object
        [ ( &amp;quot;email&amp;quot;, Encode.string user.email )
        ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once again we rely on a custom type to define &lt;code&gt;Session&lt;/code&gt; which can be either &lt;code&gt;Anonymous&lt;/code&gt; or &lt;code&gt;Authenticated User&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;The Phoenix AdminChannel&lt;/h3&gt;

&lt;p&gt;If we start the application, we can see errors related to socket connection. This is because we haven&amp;#39;t created the &lt;code&gt;AdminChannel&lt;/code&gt; yet, so let&amp;#39;s go ahead and add its definition to the &lt;code&gt;UserSocket&lt;/code&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/lib/passwordless_auth_web/channels/user_socket.ex

defmodule PasswordlessAuthWeb.UserSocket do
  # ...

  channel(&amp;quot;admin:*&amp;quot;, PasswordlessAuthWeb.AdminChannel)

  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, the channel module:&lt;/p&gt;

&lt;pre&gt;&lt;code class="elixir"&gt;# apps/passwordless_auth_web/lib/passwordless_auth_web/channels/admin_channel.ex

defmodule PasswordlessAuthWeb.AdminChannel do
  use PasswordlessAuthWeb, :channel

  require Logger

  alias PasswordlessAuth.Repo

  def join(&amp;quot;admin:lobby&amp;quot;, _payload, socket) do
    {:ok, socket.assigns.user, socket}
  end

  def handle_in(&amp;quot;data&amp;quot;, _, socket) do
    admin_emails = Application.get_env(:passwordless_auth, :repo)[:emails]

    {:reply, {:ok, %{data: admin_emails}}, socket}
  end

  def handle_in(&amp;quot;sign_out&amp;quot;, _, socket) do
    email = socket.assigns.user.email
    :ok = Repo.invalidate(email)

    {:reply, {:ok, %{success: true}}, socket}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The logic for this module is very simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;join&lt;/code&gt; always returns success and the authenticated user data assigned to the connection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_in(&amp;quot;data&amp;quot;, _, _)&lt;/code&gt; returns the existing list of valid emails so that we can render it in the lobby view.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle_in(&amp;quot;sign_out&amp;quot;, _, _)&lt;/code&gt; takes the assigned email and invalidates its token in the repository, so cannot use it again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So that&amp;#39;s pretty much it. We finally have our basic &lt;strong&gt;Elm&lt;/strong&gt; SPA admin panel, backed with a &lt;strong&gt;Phoenix&lt;/strong&gt; passwordless and databaseless system. While I was writing this post, I have refactored many parts of the application so I probably might have missed including some of the changes. Therefore, don&amp;#39;t forget to check out the source code for the missing pieces, and sorry for any inconvenience. &lt;strong&gt;Elm 0.19.0&lt;/strong&gt; just came out, so I&amp;#39;m planning to write a new part about upgrading it, once it has proper support for Websockets.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;div class="btn-wrapper"&gt;
  &lt;a href="https://github.com/bigardone/passwordless-auth" target="_blank" class="btn"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt; Source code&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
